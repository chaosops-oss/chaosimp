import os
from types import LambdaType
import yaml
from troposphere import Template
from chaosimp.cf_resource_builders.template import *
from chaosimp.cli_output import cli_error
from chaosimp.name_constants import *


class Template:
    def __init__(self, path: str, name: str):
        self.path = path
        self.name = name

        file_path = os.path.join(path, 'imp.yml')

        with open(file_path, 'r') as stream:
            self.data = yaml.safe_load(stream)

    def process(self, role_arn: str, processor: LambdaType):
        try:
            ssm_docs = []
            cf_template = Template(self.data["Description"])

            # First, add SSM documents

            for action in self.data['Actions']:
                if action['Type'] == ACTION_TYPE_IMP_RUN_SCRIPT:
                    shell_script_path = action.get("Document", {}).get("Path")
                    params = action.get("Document", {}).get("Parameters", [])
                    ssm_document = build_ssm_document(
                        self.name,
                        action.get("Name"),
                        self.ssm_document(shell_script_path, params)
                    )

                    cf_template.add_resource(ssm_document)

                    ssm_docs.append(action.get("Name"))

            # Now, create FIS templates

            cf_template.add_resource(
                build_fis_template(
                    self.name,
                    role_arn,
                    self.data,
                    ssm_docs
                )
            )

            return processor(
                cf_template_name(self.name), self.name, cf_template, TAG_VALUE_RESOURCE_TYPE_TEMPLATE, False
            )
        except yaml.YAMLError as e:
            cli_error(f'{type(e).__name__}: {e}')

    def ssm_document(self, shell_script_path: str, parameters: dict) -> dict:
        file_path = os.path.join(self.path, shell_script_path)

        full_parameters = {
            p["Key"]: {
                "description": "(Required) Auto-generated parameter for Imp CLI document.",
                "type": "String"
            } for p in parameters
        }

        with open(file_path, 'r') as stream:
            text = stream.read()
            return {
                "description": "This document was generated by Imp CLI.",
                "schemaVersion": "2.2",
                "mainSteps": [
                    {
                        "action": "aws:runShellScript",
                        "precondition": {
                            "StringEquals": ["platformType", "Linux"]
                        },
                        "name": "ImpRunShellScript",
                        "description": "Automatically generated action",
                        "inputs": {
                            "runCommand": [
                                text
                            ]
                        }
                    }
                ],
                "parameters": full_parameters
            }
