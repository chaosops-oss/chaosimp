import json
import troposphere.fis as fis
import troposphere.ssm as ssm
from troposphere import Sub
from constants import *
from resource_names import *


def build_ssm_document(template_name, name, ssm_content):
    doc = ssm.Document(ssm_document_name(template_name, name, True))

    doc.DocumentType = "Command"
    doc.Name = ssm_document_name(template_name, name, False)
    doc.Content = ssm_content

    return doc


def build_fis_template(template_name, role_arn, data, ssm_docs):
    targets = data.get("Targets", [])
    actions = data.get("actions", [])
    stop_conditions = data.get("StopConditions", [])

    doc = fis.ExperimentTemplate(
        fis_template_name(template_name, True),
        DependsOn=list(map(lambda d: ssm_document_name(template_name, d, True), ssm_docs))
    )

    if not stop_conditions:
        # the API, at the very least, expects an empty stop condition
        none_stop_condition = fis.ExperimentTemplateStopCondition("StopCondition")
        none_stop_condition.Source = "none"

        stop_conditions.append(none_stop_condition)

    doc.Description = "Template generated by Imp CLI."

    doc.RoleArn = role_arn

    doc.Targets = {
        fis_target_name(template_name, t["Name"]): build_fis_target(t) for t in targets
    }

    doc.Actions = {
        fis_action_name(a["name"]): build_fis_action(template_name, a) for a in actions
    }

    doc.StopConditions = stop_conditions

    doc.Tags = {
        "Name": fis_template_name(template_name, False)
    }

    return doc


def build_fis_target(target):

    if "ResourceTags" in target:
        tags = target["ResourceTags"]

        target["ResourceTags"] = {
            t["Key"]: t["Value"] for t in tags
        }

    target.pop('Name', None)

    return target


def build_fis_action(template_name, action):
    if action["type"] == ACTION_TYPE_IMP_RUN_SCRIPT:
        return __imp_run_script(template_name, action)
    elif action["type"] == ACTION_TYPE_AWS_FIS_INJECT_API_INTERNAL_ERROR:
        return __aws_fis_inject_internal_error(template_name, action)
    else:
        return None


def __imp_run_script(template_name, action):
    fis_action = {}

    ssm_doc_arn = Sub(
        "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/"
        + ssm_document_name(template_name, action["name"], False)
    )

    fis_action["ActionId"] = "aws:ssm:send-command"

    fis_action["Targets"] = {
        "Instances": fis_target_name(template_name, action["target"])
    }

    fis_action["Parameters"] = {
        "documentArn": ssm_doc_arn,
        "documentParameters": json.dumps(
            {
                p["key"]: p["value"] for p in action.get("parameters", [])
            }
        ),
        "duration": action["duration"]
    }

    fis_action["StartAfter"] = list(map(lambda a: fis_action_name(a), action.get("start_after", [])))

    return fis_action


def __aws_fis_inject_internal_error(template_name, action):
    fis_action = {}

    fis_action["ActionId"] = ACTION_TYPE_AWS_FIS_INJECT_API_INTERNAL_ERROR

    fis_action["Targets"] = {
        "Instances": fis_target_name(template_name, action["target"])
    }

    fis_action["Parameters"] = {
        "duration": action["duration"],
        "percentage": action["duration"],
        "operations": action["operations"]
    }

    return fis_action